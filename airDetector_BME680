/*First, the ArduinoJson and the Adafruit BME680 libraries were imported to*/

#define ARDUINOJSON_ENABLE_ARDUINO_STRING 1 //Allows to take strings from the json document
#include <ArduinoJson.h>
#include <math.h> //To round the values
#include <Adafruit_BME680.h> //BME680 sensor library
#include <string.h> 
#define BME_SCK 13
#define BME_MISO 12
#define BME_MOSI 11
#define BME_CS 10
#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME680 bme; 
  
  /*Inizialating variables */
double temperatureInF= 0;
double relativeHumidity= 0;
double pressureHpa=0;
double gasResistanceKOhms=0;
double approxAltitudeInM=0;

void setup() {
    /* This loop is created to make sure that the sensor is working properly*/
  if (!bme.begin()) {
    Particle.publish("Log", "Could not find a valid BME680 sensor");
  } else {
    Particle.publish("Log", "bme.begin()"); 
    
   /* this the data that the sensor is collecting*/
   
    bme.setTemperatureOversampling(BME680_OS_8X);
    bme.setHumidityOversampling(BME680_OS_2X);
    bme.setPressureOversampling(BME680_OS_4X);
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    bme.setGasHeater(320, 150); // 320*C for 150 ms

/*Setting up variables names*/

    Particle.variable("Temperature", &temperatureInF, DOUBLE);
    Particle.variable("Humidity", &relativeHumidity, DOUBLE);
    Particle.variable("Pressure", &pressureHpa, DOUBLE);
    Particle.variable("Gas", &gasResistanceKOhms, DOUBLE);
    Particle.variable("Altitude", &approxAltitudeInM, DOUBLE);
  }
}

void loop() {
    /* set a Json array. Creates a Json object named jsondata*/
    const size_t capacity = JSON_ARRAY_SIZE(8) + JSON_OBJECT_SIZE(16) + 30;
      DynamicJsonDocument jsondata(capacity);

  if (! bme.performReading()) {
    Particle.publish("Log", "Failed to perform reading");
  } else {
      /*since the sensor collects the temperature in Celcius, the following formula was used to convert the temperature in 
      Fahrenheit:
      (temperatureInCelcius * 9/5) + 32 = temperatureInFahrenheit*/
    temperatureInF = (bme.temperature * 9/5) + 32; 
    relativeHumidity = bme.humidity;
    pressureHpa = bme.pressure / 100.0;
    gasResistanceKOhms = bme.gas_resistance / 1000.0;
    approxAltitudeInM = bme.readAltitude(SEALEVELPRESSURE_HPA);

/* To make the data show in Chords, the variables need to be Json formated.
Moreover, the data looks better organized when it is printed out*/
jsondata["temperatureInF"]=  round(temperatureInF * 100) / 100;
jsondata["relativeHumidity"] =  round(relativeHumidity * 100)/100;
jsondata["pressureHpa"] =  round(pressureHpa * 100)/100;
jsondata["gasResistanceKOhms"] = round(gasResistanceKOhms* 100)/100;
jsondata["approxAltitudeInM"] = round(approxAltitudeInM* 100)/100;


 String data;
    serializeJson(jsondata, data);
    Particle.publish("Sensor", data);
  }
  /* The delay is to control in how many seconds the data is printed*/
  delay(10000);
}
